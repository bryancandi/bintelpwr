#!/bin/bash
# bintelpwr
# For INTEL Processors
# Display current energy consumption in watts using Intel Running Average Power Limit (RAPL).
#
# Copyright (C) 2024 by Bryan Candiliere
#

version="bintelpwr 0.0.2" # 09-14-2024
num="1" # 1 second refresh interval

show_help() {
    echo "Usage: $0 [options]"
    echo -e "For INTEL Processors. Display current energy consumption in watts using Intel Running Average Power Limit (RAPL).\n"
    echo "Options:"
    echo "  -h, --help    Display this help message"
    echo "  -t, --time    Specify refresh interval in seconds"
    echo "  -v, --version Display script version"
}

for arg in "$@"; do
  shift
  case "$arg" in
    '--help')    set -- "$@" '-h'   ;;
    '--time')    set -- "$@" '-t'   ;;
    '--version') set -- "$@" '-v'   ;;
    *)           set -- "$@" "$arg" ;;
  esac
done

while getopts ":ht:v" option; do
    case "${option}" in
        h)
            show_help
            exit 0
            ;;
        t | time)
            num="$OPTARG"
            if [[ "$num" =~ ^[0-9]+$ ]] && [[ "$num" != 0 ]]; then
                num="$OPTARG"
            else
                echo "Invalid input: $OPTARG. Please enter a positive whole number."
                exit 1
            fi
            ;;
        v)
            echo "${version}"
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            echo "Try 'bintelpwr -h' for more information."
            #show_help
            exit 1
            ;;
    esac
done

trap ctrl_c INT

ctrl_c() {
    echo -e "\nExiting."
    exit 0
}

check_root() {
    if [[ "$EUID" -ne 0 ]]
        then echo "This script requires root privileges to run."
        exit 1
    fi
}

# Run check function
check_root

check_powercap_file() {
    if [[ ! -d /sys/class/powercap/intel-rapl ]]; then
        echo "Powercap not found. Exiting."
        exit 1
    fi
}

# Run check function
check_powercap_file

f_cpu_type() {
    if [[ -f /proc/cpuinfo ]]; then
        cpu_type=$(grep -i -m1 "model name" < /proc/cpuinfo | sed -nr '/[Mm]odel name/ s/.*:\s*(.*) @ .*/\1/p')
    else
        cpu_type="Unknown CPU type!"
    fi
}

#powercap_devices=$(ls /sys/class/powercap/intel-rapl:*/energy_uj)
#powercap_names=$(ls /sys/class/powercap/intel-rapl:*/name)
powercap_devices=$(ls /sys/class/powercap/ | grep intel-rapl:)
separator_line="-----------------------------------"
sleep_line="Getting initial power measurements... (sleeping $num seconds)"
exit_line="Press Ctrl-C to exit."

while true; do

    # Display this message only before the first loop
    if [[ $loop_count -eq 0 ]]; then
        clear
        echo -e "$sleep_line\n$exit_line"
    fi

    # Convert from seconds to uJ
    num_mil="$((num * 1000000))"

    f_cpu_type

    output=$(clear

    printf "\033[1m%s\033[0m\n" "$cpu_type"

    for device in $powercap_devices; do
    (
        # Get device names
        name=$(cat "/sys/class/powercap/$device/name")

        # Get initial power usage
        initial_power=$(cat "/sys/class/powercap/$device/energy_uj")

        # Sleep for one second for accurate power measurement
        sleep "$num"

        # Get current power usage
        current_power=$(cat "/sys/class/powercap/$device/energy_uj")

        # Calculate power difference and convert from microjoules (uJ) to watts
        power_diff=$(echo "scale=2; ($current_power - $initial_power) / $num_mil" | bc)

        # Get device ID number and remove text for sorting
        device_num=$(echo "$device" | sed 's/[^0-9:]//g; s/://')

        # Display current CPU power usage and power difference
        #echo "$device_num $name: $power_diff watts" | column -t
        printf "%-5s %-15s %s\n" "$device_num" "$name:" "$power_diff watts"
    ) &

    done)

    wait

    # Separate the output into the first line and powercap devices to be sorted
    header_cpu_line=$(head -n 1 <<< "$output")
    powercap_device_lines=$(tail -n +2 <<< "$output")

    # Sort the devices by the first field (device number)
    sorted_powercap_device_lines=$(echo "$powercap_device_lines" | sort -k 1,1)

    # Combine lines for final formatted output
    final_output="$header_cpu_line\n$separator_line\n\n$sorted_powercap_device_lines\n\n$separator_line\n$exit_line"

    echo -e "$final_output"

    # Count loops for initial power message
    loop_count=$((loop_count + 1))

done
