#!/bin/bash
# bintelpwr
# Display current power draw in watts for INTEL Processors
# Copyright (C) 2024 by Bryan Candiliere
#

# Trap Ctrl-C and exit
trap ctrl_c INT

ctrl_c() {
    echo -e "\nExiting."
    exit 0
}

# Function to check if the script is running as root
check_root() {
    if [[ "$EUID" -ne 0 ]]
        then echo "This script requires root privileges to run."
        exit 1
    fi
}

# Run check function
check_root

# Function to check if the powercap/intel-rapl exists
check_powercap_file() {
    if [[ ! -d /sys/class/powercap/intel-rapl ]]; then
        echo "Powercap not found. Exiting."
        exit 1
    fi
}

# Run check function
check_powercap_file

f_cpu_type() {
    if [[ -f /proc/cpuinfo ]]; then
        cpu_type=$(grep -i -m1 "model name" < /proc/cpuinfo | sed -nr '/[Mm]odel name/ s/.*:\s*(.*) @ .*/\1/p')
    else
        cpu_type="Unknown CPU type!"
    fi
}

#powercap_devices=$(ls /sys/class/powercap/intel-rapl:*/energy_uj)
#powercap_names=$(ls /sys/class/powercap/intel-rapl:*/name)
powercap_devices=$(ls /sys/class/powercap/ | grep intel-rapl:)

while true; do
    f_cpu_type

    output=$(clear

    printf "\033[1m%s\033[0m\n" "$cpu_type"

    for device in $powercap_devices; do
        (
        # Get device names
        name=$(cat "/sys/class/powercap/$device/name")

        # Get initial power usage
        initial_power=$(cat "/sys/class/powercap/$device/energy_uj")

        # Sleep for one second for accurate power measurement
        sleep 1

        # Get current power usage
        current_power=$(cat "/sys/class/powercap/$device/energy_uj")

        # Calculate power difference and convert from microjoules (uJ) to watts
        power_diff=$(echo "scale=2; ($current_power - $initial_power) / 1000000" | bc)

        # Get device number and remove text for sorting.
        device_num=$(echo "$device" | sed 's/[^0-9:]//g; s/://')

        # Display current CPU power usage and power difference
        #echo "$name: $power_diff watts" | column -t
        printf "%-5s %-15s %s\n" "$device_num" "$name:" "$power_diff watts"
        ) &

    done)

    wait

    # Separate the output into the first line and powercap devices to be sorted
    header_line_cpu=$(head -n 1 <<< "$output")
    powercap_device_lines=$(tail -n +2 <<< "$output")

    # Sort the devices alphabetically by the first field (device name)
    sorted_powercap_device_lines=$(echo "$powercap_device_lines" | sort -k 1,1)

    # Combine the first line with the sorted remaining lines
    final_output="$header_line_cpu\n\n$sorted_powercap_device_lines"

    echo -e "$final_output"

done
